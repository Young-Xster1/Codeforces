
//* بِسْمِ اللهِ الرَّحْمٰنِ الرَّحِيْمِ ///*/
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define fast cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
#define ll long long
#define vt vector<ll>
#define matrix vector<vector<ll>>
#define ff first
#define ss second
#define yes cout << "yes" << '\n';
#define no cout << "no" << '\n';
#define ps(x, y) fixed << setprecision(y) << x;
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sortt(x) sort(all(x))
#define sorttr(x) sort(rall(x))
#define mems(a, x) memset(a, x, sizeof(a))
#define rev(x) reverse(all(x))
#define co cout <<
#define inp(x) cin >> x
#define espace cout << " "
#define ln cout << endl
#define takevect(x) for (auto &d : x) cin >> d;
#define len(s) (int)s.size()
#define rep(i, y) for (int i = 0; i < y; i++)
#define INF INT_MAX

class solution{ 
public :
    void solve() {
        ll n;inp(n);
        vt a(n);takevect(a);
        bool notsorted=false;
        ll i=0,l=-1,r=-1;
        while(i<n-1){
            if(a[i]>a[i+1]){
                notsorted=true;
                l=i;
            }
            while(i<n-1 && notsorted==true){
                i++;
                if(i+1<n && a[i]<a[i+1]){
                    notsorted=false;
                    r=i;
                }
            }
            if(r!=-1) break;
            i++;
        }
        if(l==-1 && r==-1){
            yes;co 1;espace;co 1;return;
        }
        
        if(r==-1){
            reverse(a.begin() + l, a.end());
            if(!is_sorted(a.begin(),a.end())){
                no;return;
            }else{
                yes;co l+1;espace;co n;return;
            }
        }
        reverse(a.begin() + l, a.begin()+r+1);
            if(!is_sorted(a.begin(),a.end())){
                no;return;
            }else{
                yes;co l+1;espace;co r+1;return;
            }
        
         
        
    }
};


signed main() {
    fast;
    cout << fixed;
    cout << setprecision(14);
    #ifndef ONLINE_JUDGE
        freopen("inp.txt", "r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    solution sol;
    // int test=1 ;  inp ( test );
    // while ( test -- ) 
    sol.solve();
    return 0;
}
